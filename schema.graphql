"""Represents a binary file in a space. An asset can be any file type."""
type Asset {
  contentType(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): String
  fileName(locale: String): String
  height(locale: String): Int
  linkedFrom(allowedLocales: [String]): AssetLinkingCollections
  size(locale: String): Int
  sys: Sys!
  title(locale: String): String
  url(locale: String, transform: ImageTransformOptions): String
  width(locale: String): Int
}

type AssetCollection {
  items: [Asset]!
  limit: Int!
  skip: Int!
  total: Int!
}

input AssetFilter {
  AND: [AssetFilter]
  OR: [AssetFilter]
  contentType: String
  contentType_contains: String
  contentType_exists: Boolean
  contentType_in: [String]
  contentType_not: String
  contentType_not_contains: String
  contentType_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  description: String
  description_contains: String
  description_exists: Boolean
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_in: [String]
  fileName: String
  fileName_contains: String
  fileName_exists: Boolean
  fileName_in: [String]
  fileName_not: String
  fileName_not_contains: String
  fileName_not_in: [String]
  height: Int
  height_exists: Boolean
  height_gt: Int
  height_gte: Int
  height_in: [Int]
  height_lt: Int
  height_lte: Int
  height_not: Int
  height_not_in: [Int]
  size: Int
  size_exists: Boolean
  size_gt: Int
  size_gte: Int
  size_in: [Int]
  size_lt: Int
  size_lte: Int
  size_not: Int
  size_not_in: [Int]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
  width: Int
  width_exists: Boolean
  width_gt: Int
  width_gte: Int
  width_in: [Int]
  width_lt: Int
  width_lte: Int
  width_not: Int
  width_not_in: [Int]
}

type AssetLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  eventCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EventCollection
  externalResourceCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): ExternalResourceCollection
  speakerCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): SpeakerCollection
  sponsorCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): SponsorCollection
}

enum AssetOrder {
  contentType_ASC
  contentType_DESC
  fileName_ASC
  fileName_DESC
  height_ASC
  height_DESC
  size_ASC
  size_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  url_ASC
  url_DESC
  width_ASC
  width_DESC
}

"""
The Circle scalar type represents a circle, defined by the coordinates of its center and a radius. The Circle type is used to represent a searchable area together with the '_within_circle' filter.
"""
scalar Circle

type ContentfulMetadata {
  tags: [ContentfulTag]!
}

input ContentfulMetadataFilter {
  tags: ContentfulMetadataTagsFilter
  tags_exists: Boolean
}

input ContentfulMetadataTagsFilter {
  id_contains_all: [String]
  id_contains_none: [String]
  id_contains_some: [String]
}

"""
Represents a tag entity for finding and organizing content easily.
    Find out more here: https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/content-tags
"""
type ContentfulTag {
  id: String
  name: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z,
    compliant with the 'date-time' format outlined in section 5.6 of
    the RFC 3339 profile of the ISO 8601 standard for representation
    of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The 'Dimension' type represents dimensions as whole numeric values between `1` and `4000`.
"""
scalar Dimension

interface Entry {
  contentfulMetadata: ContentfulMetadata!
  sys: Sys!
}

type EntryCollection {
  items: [Entry]!
  limit: Int!
  skip: Int!
  total: Int!
}

input EntryFilter {
  AND: [EntryFilter]
  OR: [EntryFilter]
  contentfulMetadata: ContentfulMetadataFilter
  sys: SysFilter
}

enum EntryOrder {
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/z273njukdgu1/content_types/event)
"""
type Event implements Entry {
  albumUrl(locale: String): String
  category(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  coordinates(locale: String): Location
  description(locale: String): String
  linkedFrom(allowedLocales: [String]): EventLinkingCollections
  location(locale: String): String
  notes(locale: String): String
  onlineEvent(locale: String): Boolean
  poster(locale: String, preview: Boolean): Asset
  quota(locale: String): Int
  sessionsCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EventSessionsCollection
  slug(locale: String): String
  startingDate(locale: String): DateTime
  sys: Sys!
  title(locale: String): String
  url(locale: String): String
  videoUrl(locale: String): [String]
}

type EventCollection {
  items: [Event]!
  limit: Int!
  skip: Int!
  total: Int!
}

input EventFilter {
  AND: [EventFilter]
  OR: [EventFilter]
  albumUrl: String
  albumUrl_contains: String
  albumUrl_exists: Boolean
  albumUrl_in: [String]
  albumUrl_not: String
  albumUrl_not_contains: String
  albumUrl_not_in: [String]
  category: String
  category_contains: String
  category_exists: Boolean
  category_in: [String]
  category_not: String
  category_not_contains: String
  category_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  coordinates_exists: Boolean
  coordinates_within_circle: Circle
  coordinates_within_rectangle: Rectangle
  description: String
  description_contains: String
  description_exists: Boolean
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_in: [String]
  location: String
  location_contains: String
  location_exists: Boolean
  location_in: [String]
  location_not: String
  location_not_contains: String
  location_not_in: [String]
  notes: String
  notes_contains: String
  notes_exists: Boolean
  notes_in: [String]
  notes_not: String
  notes_not_contains: String
  notes_not_in: [String]
  onlineEvent: Boolean
  onlineEvent_exists: Boolean
  onlineEvent_not: Boolean
  poster_exists: Boolean
  quota: Int
  quota_exists: Boolean
  quota_gt: Int
  quota_gte: Int
  quota_in: [Int]
  quota_lt: Int
  quota_lte: Int
  quota_not: Int
  quota_not_in: [Int]
  sessionsCollection_exists: Boolean
  slug: String
  slug_contains: String
  slug_exists: Boolean
  slug_in: [String]
  slug_not: String
  slug_not_contains: String
  slug_not_in: [String]
  startingDate: DateTime
  startingDate_exists: Boolean
  startingDate_gt: DateTime
  startingDate_gte: DateTime
  startingDate_in: [DateTime]
  startingDate_lt: DateTime
  startingDate_lte: DateTime
  startingDate_not: DateTime
  startingDate_not_in: [DateTime]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
  videoUrl_contains_all: [String]
  videoUrl_contains_none: [String]
  videoUrl_contains_some: [String]
  videoUrl_exists: Boolean
}

type EventLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum EventOrder {
  albumUrl_ASC
  albumUrl_DESC
  category_ASC
  category_DESC
  location_ASC
  location_DESC
  onlineEvent_ASC
  onlineEvent_DESC
  quota_ASC
  quota_DESC
  slug_ASC
  slug_DESC
  startingDate_ASC
  startingDate_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
}

type EventSessionsCollection {
  items: [Session]!
  limit: Int!
  skip: Int!
  total: Int!
}

"""
Place to add external resource such as Link, Contact, etc. [See type definition](https://app.contentful.com/spaces/z273njukdgu1/content_types/externalResource)
"""
type ExternalResource implements Entry {
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): String
  image(locale: String, preview: Boolean): Asset
  linkedFrom(allowedLocales: [String]): ExternalResourceLinkingCollections
  sys: Sys!
  title(locale: String): String
  url(locale: String): String
}

type ExternalResourceCollection {
  items: [ExternalResource]!
  limit: Int!
  skip: Int!
  total: Int!
}

input ExternalResourceFilter {
  AND: [ExternalResourceFilter]
  OR: [ExternalResourceFilter]
  contentfulMetadata: ContentfulMetadataFilter
  description: String
  description_contains: String
  description_exists: Boolean
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_in: [String]
  image_exists: Boolean
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
}

type ExternalResourceLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum ExternalResourceOrder {
  description_ASC
  description_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
}

"""The 'HexColor' type represents color in `rgb:ffffff` string format."""
scalar HexColor

enum ImageFormat {
  AVIF

  """JPG image format."""
  JPG

  """
  Progressive JPG format stores multiple passes of an image in progressively higher detail.
          When a progressive image is loading, the viewer will first see a lower quality pixelated version which
          will gradually improve in detail, until the image is fully downloaded. This is to display an image as
          early as possible to make the layout look as designed.
  """
  JPG_PROGRESSIVE

  """PNG image format"""
  PNG

  """
  8-bit PNG images support up to 256 colors and weigh less than the standard 24-bit PNG equivalent.
          The 8-bit PNG format is mostly used for simple images, such as icons or logos.
  """
  PNG8

  """WebP image format."""
  WEBP
}

enum ImageResizeFocus {
  """Focus the resizing on the bottom."""
  BOTTOM

  """Focus the resizing on the bottom left."""
  BOTTOM_LEFT

  """Focus the resizing on the bottom right."""
  BOTTOM_RIGHT

  """Focus the resizing on the center."""
  CENTER

  """Focus the resizing on the largest face."""
  FACE

  """Focus the resizing on the area containing all the faces."""
  FACES

  """Focus the resizing on the left."""
  LEFT

  """Focus the resizing on the right."""
  RIGHT

  """Focus the resizing on the top."""
  TOP

  """Focus the resizing on the top left."""
  TOP_LEFT

  """Focus the resizing on the top right."""
  TOP_RIGHT
}

enum ImageResizeStrategy {
  """
  Crops a part of the original image to fit into the specified dimensions.
  """
  CROP

  """
  Resizes the image to the specified dimensions, cropping the image if needed.
  """
  FILL

  """Resizes the image to fit into the specified dimensions."""
  FIT

  """
  Resizes the image to the specified dimensions, padding the image if needed.
          Uses desired background color as padding color.
  """
  PAD

  """
  Resizes the image to the specified dimensions, changing the original aspect ratio if needed.
  """
  SCALE

  """Creates a thumbnail from the image."""
  THUMB
}

input ImageTransformOptions {
  """
  Desired background color, used with corner radius or `PAD` resize strategy.
          Defaults to transparent (for `PNG`, `PNG8` and `WEBP`) or white (for `JPG` and `JPG_PROGRESSIVE`).
  """
  backgroundColor: HexColor

  """
  Desired corner radius in pixels.
          Results in an image with rounded corners (pass `-1` for a full circle/ellipse).
          Defaults to `0`. Uses desired background color as padding color,
          unless the format is `JPG` or `JPG_PROGRESSIVE` and resize strategy is `PAD`, then defaults to white.
  """
  cornerRadius: Int

  """Desired image format. Defaults to the original image format."""
  format: ImageFormat

  """Desired height in pixels. Defaults to the original image height."""
  height: Dimension

  """
  Desired quality of the image in percents.
          Used for `PNG8`, `JPG`, `JPG_PROGRESSIVE` and `WEBP` formats.
  """
  quality: Quality

  """Desired resize focus area. Defaults to `CENTER`."""
  resizeFocus: ImageResizeFocus

  """Desired resize strategy. Defaults to `FIT`."""
  resizeStrategy: ImageResizeStrategy

  """Desired width in pixels. Defaults to the original image width."""
  width: Dimension
}

type Location {
  lat: Float
  lon: Float
}

"""
A place to write blog post [See type definition](https://app.contentful.com/spaces/z273njukdgu1/content_types/post)
"""
type Post implements Entry {
  content(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  linkedFrom(allowedLocales: [String]): PostLinkingCollections
  slug(locale: String): String
  subtitle(locale: String): String
  sys: Sys!
  title(locale: String): String
}

type PostCollection {
  items: [Post]!
  limit: Int!
  skip: Int!
  total: Int!
}

input PostFilter {
  AND: [PostFilter]
  OR: [PostFilter]
  content: String
  content_contains: String
  content_exists: Boolean
  content_in: [String]
  content_not: String
  content_not_contains: String
  content_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  slug: String
  slug_contains: String
  slug_exists: Boolean
  slug_in: [String]
  slug_not: String
  slug_not_contains: String
  slug_not_in: [String]
  subtitle: String
  subtitle_contains: String
  subtitle_exists: Boolean
  subtitle_in: [String]
  subtitle_not: String
  subtitle_not_contains: String
  subtitle_not_in: [String]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
}

type PostLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum PostOrder {
  slug_ASC
  slug_DESC
  subtitle_ASC
  subtitle_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  title_ASC
  title_DESC
}

"""
The 'Quality' type represents quality as whole numeric values between `1` and `100`.
"""
scalar Quality

type Query {
  asset(id: String!, locale: String, preview: Boolean): Asset
  assetCollection(limit: Int = 100, locale: String, order: [AssetOrder], preview: Boolean, skip: Int = 0, where: AssetFilter): AssetCollection
  entryCollection(limit: Int = 100, locale: String, order: [EntryOrder], preview: Boolean, skip: Int = 0, where: EntryFilter): EntryCollection
  event(id: String!, locale: String, preview: Boolean): Event
  eventCollection(limit: Int = 100, locale: String, order: [EventOrder], preview: Boolean, skip: Int = 0, where: EventFilter): EventCollection
  externalResource(id: String!, locale: String, preview: Boolean): ExternalResource
  externalResourceCollection(limit: Int = 100, locale: String, order: [ExternalResourceOrder], preview: Boolean, skip: Int = 0, where: ExternalResourceFilter): ExternalResourceCollection
  post(id: String!, locale: String, preview: Boolean): Post
  postCollection(limit: Int = 100, locale: String, order: [PostOrder], preview: Boolean, skip: Int = 0, where: PostFilter): PostCollection
  resources(id: String!, locale: String, preview: Boolean): Resources
  resourcesCollection(limit: Int = 100, locale: String, order: [ResourcesOrder], preview: Boolean, skip: Int = 0, where: ResourcesFilter): ResourcesCollection
  session(id: String!, locale: String, preview: Boolean): Session
  sessionCollection(limit: Int = 100, locale: String, order: [SessionOrder], preview: Boolean, skip: Int = 0, where: SessionFilter): SessionCollection
  speaker(id: String!, locale: String, preview: Boolean): Speaker
  speakerCollection(limit: Int = 100, locale: String, order: [SpeakerOrder], preview: Boolean, skip: Int = 0, where: SpeakerFilter): SpeakerCollection
  sponsor(id: String!, locale: String, preview: Boolean): Sponsor
  sponsorCollection(limit: Int = 100, locale: String, order: [SponsorOrder], preview: Boolean, skip: Int = 0, where: SponsorFilter): SponsorCollection
}

"""
The Rectangle scalar type represents a rectangle, defined by the coordinates of its top left and bottom right corners. The Rectangle type is used to represent a searchable area together with the '_within_rectangle' filter.
"""
scalar Rectangle

"""
What resource is for? (ex: Hacktoberfest, Basic javascript, etc.) [See type definition](https://app.contentful.com/spaces/z273njukdgu1/content_types/resources)
"""
type Resources implements Entry {
  buttonText(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  description(locale: String): String
  linkedFrom(allowedLocales: [String]): ResourcesLinkingCollections
  sys: Sys!
  title(locale: String): String
  url(locale: String): String
}

type ResourcesCollection {
  items: [Resources]!
  limit: Int!
  skip: Int!
  total: Int!
}

input ResourcesFilter {
  AND: [ResourcesFilter]
  OR: [ResourcesFilter]
  buttonText: String
  buttonText_contains: String
  buttonText_exists: Boolean
  buttonText_in: [String]
  buttonText_not: String
  buttonText_not_contains: String
  buttonText_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  description: String
  description_contains: String
  description_exists: Boolean
  description_in: [String]
  description_not: String
  description_not_contains: String
  description_not_in: [String]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
}

type ResourcesLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum ResourcesOrder {
  buttonText_ASC
  buttonText_DESC
  description_ASC
  description_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  title_ASC
  title_DESC
  url_ASC
  url_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/z273njukdgu1/content_types/session)
"""
type Session implements Entry {
  contentfulMetadata: ContentfulMetadata!
  deckUrl(locale: String): String
  endDatetime(locale: String): DateTime
  linkedFrom(allowedLocales: [String]): SessionLinkingCollections
  speaker(locale: String, preview: Boolean): Speaker
  startDatetime(locale: String): DateTime
  sys: Sys!
  title(locale: String): String
}

type SessionCollection {
  items: [Session]!
  limit: Int!
  skip: Int!
  total: Int!
}

input SessionFilter {
  AND: [SessionFilter]
  OR: [SessionFilter]
  contentfulMetadata: ContentfulMetadataFilter
  deckUrl: String
  deckUrl_contains: String
  deckUrl_exists: Boolean
  deckUrl_in: [String]
  deckUrl_not: String
  deckUrl_not_contains: String
  deckUrl_not_in: [String]
  endDatetime: DateTime
  endDatetime_exists: Boolean
  endDatetime_gt: DateTime
  endDatetime_gte: DateTime
  endDatetime_in: [DateTime]
  endDatetime_lt: DateTime
  endDatetime_lte: DateTime
  endDatetime_not: DateTime
  endDatetime_not_in: [DateTime]
  speaker: cfSpeakerNestedFilter
  speaker_exists: Boolean
  startDatetime: DateTime
  startDatetime_exists: Boolean
  startDatetime_gt: DateTime
  startDatetime_gte: DateTime
  startDatetime_in: [DateTime]
  startDatetime_lt: DateTime
  startDatetime_lte: DateTime
  startDatetime_not: DateTime
  startDatetime_not_in: [DateTime]
  sys: SysFilter
  title: String
  title_contains: String
  title_exists: Boolean
  title_in: [String]
  title_not: String
  title_not_contains: String
  title_not_in: [String]
}

type SessionLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  eventCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EventCollection
}

enum SessionOrder {
  deckUrl_ASC
  deckUrl_DESC
  endDatetime_ASC
  endDatetime_DESC
  startDatetime_ASC
  startDatetime_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  title_ASC
  title_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/z273njukdgu1/content_types/speaker)
"""
type Speaker implements Entry {
  avatar(locale: String, preview: Boolean): Asset
  contentfulMetadata: ContentfulMetadata!
  employer(locale: String): String
  jobTitle(locale: String): String
  linkedFrom(allowedLocales: [String]): SpeakerLinkingCollections
  name(locale: String): String
  showEmployer(locale: String): Boolean
  sys: Sys!
  url(locale: String): String
}

type SpeakerCollection {
  items: [Speaker]!
  limit: Int!
  skip: Int!
  total: Int!
}

input SpeakerFilter {
  AND: [SpeakerFilter]
  OR: [SpeakerFilter]
  avatar_exists: Boolean
  contentfulMetadata: ContentfulMetadataFilter
  employer: String
  employer_contains: String
  employer_exists: Boolean
  employer_in: [String]
  employer_not: String
  employer_not_contains: String
  employer_not_in: [String]
  jobTitle: String
  jobTitle_contains: String
  jobTitle_exists: Boolean
  jobTitle_in: [String]
  jobTitle_not: String
  jobTitle_not_contains: String
  jobTitle_not_in: [String]
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  showEmployer: Boolean
  showEmployer_exists: Boolean
  showEmployer_not: Boolean
  sys: SysFilter
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
}

type SpeakerLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
  sessionCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): SessionCollection
}

enum SpeakerOrder {
  employer_ASC
  employer_DESC
  jobTitle_ASC
  jobTitle_DESC
  name_ASC
  name_DESC
  showEmployer_ASC
  showEmployer_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  url_ASC
  url_DESC
}

"""
[See type definition](https://app.contentful.com/spaces/z273njukdgu1/content_types/sponsor)
"""
type Sponsor implements Entry {
  activeSponsor(locale: String): Boolean
  category(locale: String): String
  contentfulMetadata: ContentfulMetadata!
  exclusive(locale: String): Boolean
  linkedFrom(allowedLocales: [String]): SponsorLinkingCollections
  logo(locale: String, preview: Boolean): Asset
  name(locale: String): String
  sys: Sys!
  url(locale: String): String
}

type SponsorCollection {
  items: [Sponsor]!
  limit: Int!
  skip: Int!
  total: Int!
}

input SponsorFilter {
  AND: [SponsorFilter]
  OR: [SponsorFilter]
  activeSponsor: Boolean
  activeSponsor_exists: Boolean
  activeSponsor_not: Boolean
  category: String
  category_contains: String
  category_exists: Boolean
  category_in: [String]
  category_not: String
  category_not_contains: String
  category_not_in: [String]
  contentfulMetadata: ContentfulMetadataFilter
  exclusive: Boolean
  exclusive_exists: Boolean
  exclusive_not: Boolean
  logo_exists: Boolean
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  sys: SysFilter
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
}

type SponsorLinkingCollections {
  entryCollection(limit: Int = 100, locale: String, preview: Boolean, skip: Int = 0): EntryCollection
}

enum SponsorOrder {
  activeSponsor_ASC
  activeSponsor_DESC
  category_ASC
  category_DESC
  exclusive_ASC
  exclusive_DESC
  name_ASC
  name_DESC
  sys_firstPublishedAt_ASC
  sys_firstPublishedAt_DESC
  sys_id_ASC
  sys_id_DESC
  sys_publishedAt_ASC
  sys_publishedAt_DESC
  sys_publishedVersion_ASC
  sys_publishedVersion_DESC
  url_ASC
  url_DESC
}

type Sys {
  environmentId: String!
  firstPublishedAt: DateTime
  id: String!
  publishedAt: DateTime
  publishedVersion: Int
  spaceId: String!
}

input SysFilter {
  firstPublishedAt: DateTime
  firstPublishedAt_exists: Boolean
  firstPublishedAt_gt: DateTime
  firstPublishedAt_gte: DateTime
  firstPublishedAt_in: [DateTime]
  firstPublishedAt_lt: DateTime
  firstPublishedAt_lte: DateTime
  firstPublishedAt_not: DateTime
  firstPublishedAt_not_in: [DateTime]
  id: String
  id_contains: String
  id_exists: Boolean
  id_in: [String]
  id_not: String
  id_not_contains: String
  id_not_in: [String]
  publishedAt: DateTime
  publishedAt_exists: Boolean
  publishedAt_gt: DateTime
  publishedAt_gte: DateTime
  publishedAt_in: [DateTime]
  publishedAt_lt: DateTime
  publishedAt_lte: DateTime
  publishedAt_not: DateTime
  publishedAt_not_in: [DateTime]
  publishedVersion: Float
  publishedVersion_exists: Boolean
  publishedVersion_gt: Float
  publishedVersion_gte: Float
  publishedVersion_in: [Float]
  publishedVersion_lt: Float
  publishedVersion_lte: Float
  publishedVersion_not: Float
  publishedVersion_not_in: [Float]
}

input cfSpeakerNestedFilter {
  AND: [cfSpeakerNestedFilter]
  OR: [cfSpeakerNestedFilter]
  avatar_exists: Boolean
  contentfulMetadata: ContentfulMetadataFilter
  employer: String
  employer_contains: String
  employer_exists: Boolean
  employer_in: [String]
  employer_not: String
  employer_not_contains: String
  employer_not_in: [String]
  jobTitle: String
  jobTitle_contains: String
  jobTitle_exists: Boolean
  jobTitle_in: [String]
  jobTitle_not: String
  jobTitle_not_contains: String
  jobTitle_not_in: [String]
  name: String
  name_contains: String
  name_exists: Boolean
  name_in: [String]
  name_not: String
  name_not_contains: String
  name_not_in: [String]
  showEmployer: Boolean
  showEmployer_exists: Boolean
  showEmployer_not: Boolean
  sys: SysFilter
  url: String
  url_contains: String
  url_exists: Boolean
  url_in: [String]
  url_not: String
  url_not_contains: String
  url_not_in: [String]
}